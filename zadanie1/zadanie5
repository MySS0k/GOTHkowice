/*   
zad 1
public static long silniaIter(int n) {
    long wynik = 1;
    for (int i = 2; i <= n; i++) {
        wynik *= i;
    }
    return wynik;
}

public static long silniaRek(int n) {
    if (n <= 1) return 1;
    return n * silniaRek(n - 1);
}
zad2
public static int fibIter(int n) {
    if (n == 0) return 1;
    if (n == 1) return 2;
    int a = 1, b = 2, c = 0;
    for (int i = 2; i <= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }
    return c;
}

public static int fibRek(int n) {
    if (n == 0) return 1;
    if (n == 1) return 2;
    return fibRek(n - 1) + fibRek(n - 2);
}
zad3
public static int strpos(String text, char z) {
    for (int i = 0; i < text.length(); i++) {
        if (text.charAt(i) == z) return i;
    }
    return -1;
}
zad4 
public static String flipCase(String text) {
    StringBuilder sb = new StringBuilder();
    for (char c : text.toCharArray()) {
        if (Character.isUpperCase(c)) sb.append(Character.toLowerCase(c));
        else if (Character.isLowerCase(c)) sb.append(Character.toUpperCase(c));
        else sb.append(c);
    }
    return sb.toString();
}
zad5 
public static boolean startsWith(String str1, String str2) {
    return str1.startsWith(str2);
}
zad6 
public static int strToInt(String str) {
    if (str == null || str.isEmpty()) return 0;
    int i = 0, sign = 1, result = 0;
    if (str.charAt(i) == '-') {
        sign = -1;
        i++;
    } else if (str.charAt(i) == '+') {
        i++;
    }

    while (i < str.length() && Character.isDigit(str.charAt(i))) {
        result = result * 10 + (str.charAt(i) - '0');
        i++;
    }

    if (i < str.length() && str.charAt(i) == 'e') {
        i++;
        int exp = 0;
        while (i < str.length() && Character.isDigit(str.charAt(i))) {
            exp = exp * 10 + (str.charAt(i) - '0');
            i++;
        }
        return (int) (sign * result * Math.pow(10, exp));
    }

    return sign * result;
}
zad7 
public static int strfind(String gdzie, String co) {
    return gdzie.indexOf(co);
}
zad8
public static int wordCount(String text) {
    if (text == null || text.trim().isEmpty()) return 0;
    String[] words = text.trim().split("\\s+");
    return words.length;
}
zad9 
public static String[] podzielNaSlowa(String tekst) {
    return tekst.trim().split("\\s+");
}
zad10
public static int strFindAndCount(String gdzie, String co) {
    int count = 0, index = 0;
    while ((index = gdzie.indexOf(co, index)) != -1) {
        count++;
        index += co.length();
    }
    return count;
}
zad11
public static String strcut(String str, int start, int ile) {
    if (start < 0 || start >= str.length()) return str;
    int end = Math.min(start + ile, str.length());
    return str.substring(0, start) + str.substring(end);
} 
zad12
public static void analizaTablicy(String[] tablica, String fraza) {
    int suma = 0;
    StringBuilder nieLiczbowe = new StringBuilder();
    int wystapieniaNieLiczbowe = 0;

    for (String s : tablica) {
        int val = strToInt(s);
        if (val != 0 || s.matches("[+-]?0+")) {
            suma += val;
        } else {
            nieLiczbowe.append(s);
            wystapieniaNieLiczbowe += strFindAndCount(s, fraza);
        }
    }

    String polaczony = nieLiczbowe.toString();
    int wystapieniaPolaczone = strFindAndCount(polaczony, fraza);
    double stosunek = wystapieniaPolaczone == 0 ? 0 : (double) wystapieniaNieLiczbowe / wystapieniaPolaczone;

    System.out.println("Pkt. 1: " + suma);
    System.out.println("Pkt. 2: " + polaczony);
    System.out.println("Pkt. 3: " + wystapieniaNieLiczbowe);
    System.out.println("Pkt. 4: " + wystapieniaPolaczone);
    System.out.println("Pkt. 5: " + stosunek);
}
zad13
public static String poprzestawiaj(String tekst, int[] kolejnosc) {
    char[] wynik = new char[tekst.length()];
    for (int i = 0; i < kolejnosc.length; i++) {
        wynik[kolejnosc[i]] = tekst.charAt(i);
    }
    return new String(wynik);
}
zad14
public static boolean czyAnagram(String t1, String t2) {
    int[] litery = new int[26];
    for (char c : t1.toLowerCase().toCharArray()) {
        if (Character.isLetter(c)) litery[c - 'a']++;
    }
    for (char c : t2.toLowerCase().toCharArray()) {
        if (Character.isLetter(c)) litery[c - 'a']--;
    }
    for (int i : litery) {
        if (i != 0) return false;
    }
    return true;
}
zad15
public static int[] HTMLColor2RGB(String color) {
    int r = Integer.parseInt(color.substring(1, 3), 16);
    int g = Integer.parseInt(color.substring(3, 5), 16);
    int b = Integer.parseInt(color.substring(5, 7), 16);
    return new int[]{r, g, b};
}
*/
